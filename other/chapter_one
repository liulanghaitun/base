对于c，个人感觉有几个方面比较重要：
1.指针，c语言中变量或者是函数名都会被映射为一个内存地址，函数名也只是一个程序的入口地址而已，然后通过类型符来确定基于该地址的偏移量，地址加偏移可以确定一块内存空间，以及通过类型符确定对该内存空间的读取方式，所以我们可以用一个变量来保存地址，这个变量就是指针，通过指针我们可以操作c中的一切，指针是的灵魂。
2.赋值符，过程式编程中会有状态的变更，定义状态变更的就是赋值符，赋值符可以界定值与址，通常我们定义为左址，右值，这是一种对内存空间进行读写操作的界定，对赋值符右侧的部分进行读操作，对赋值符左侧的部分进行写操作，指针加赋值符可以完成基本的内存读写操作。
3.内存布局，c代码的内存布局可以分为：代码区，全局初始化区，全局未初始化区，栈区，堆区。代码区：主要是定义操作，函数名是其入口地址，可以通过函数名来对代码进行拷贝，将代码从代码区拷贝到栈区，然后通过函数指针执行。以前这是一种代码注入的方式，现在的编译器禁止在栈区执行代码。全局初始化区：主要是定义全局初始化变量。全局未初始化区：主要是定义全局未初始化的变量。全局变量主要作用是在不同的函数之间共享数据。栈区：主要是保存函数的局部变量和维持函数调用栈，由于入栈操作，会使地址增加，出栈，会使地址减小，所以一般栈都是从低地址向高地址增长。局部变量是函数私有数据，并且函数动态调用，函数调用完后，局部变量由于出栈的操作会释放掉。堆区，主要是用于动态内存分配，一般内存分配在编译完后就会确定，对于依赖与外部输入的函数而言，初始化的内存空间过大或者过小都有问题，因此单独开辟一块内存空间来进行动态分配就显得非常合适。计算机把内存分为很多的段，用户可以的段空间是固定的，堆区的空间是从高地址向低地址方向扩张，栈区和堆区的扩展方向是相反的，并且相邻，因此对于堆区的空间分配显得非常重要，外部输入的数据过长可以覆盖栈区的数据，一旦构造的数据合适，覆盖掉函数调用的返回地址，可以改变程序的执行流程。
4.汇编，一切c的困惑都可以在汇编层找到答案，对于内存空间的操作而言，汇编是最佳的语言。指针也是内存空间的一种抽象。c语言经过编译后的代码也是汇编，可以说c抽象了汇编。
5.数据结构和算法，对于一切语言都合适，程序的两个重要方面，时间和空间就是由数据结构和算法来确定的，数据结构可以有效的组织程序中的数据，算法可以有效的对数据进行操作。通常的函数库也是属于这一块。
6.代码风格，网上有很多的c代码规范的资料。
语言的崇拜会使你成为语言的囚徒，语言只是一种工具，勺子和铲子是各有所长的。驾驭语言而不要被语言驾驭。如果你拿的是锤子，全世界都是钉子，如果你拿的是钉子，全世界都是锤子。
推荐一些灰常不错的资源：
https://github.com/1184893257/simplelinux
http://www.cnblogs.com/lua5/archive/2010/12/04/1895968.html,
《The Elements of Programming Style》
《你的灯亮着吗》
